# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'myKUTHLpusher.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import myKUTHLpusher_rc
import requests
import json


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 260)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(400, 260))
        MainWindow.setMaximumSize(QtCore.QSize(400, 260))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.updateKeyButton = QtWidgets.QPushButton(self.centralwidget)
        self.updateKeyButton.setGeometry(QtCore.QRect(230, 6, 91, 31))
        self.updateKeyButton.setObjectName("updateKeyButton")
        self.keyLabel = QtWidgets.QLabel(self.centralwidget)
        self.keyLabel.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.keyLabel.setObjectName("keyLabel")
        self.keyField = QtWidgets.QLineEdit(self.centralwidget)
        self.keyField.setGeometry(QtCore.QRect(70, 10, 151, 21))
        self.keyField.setToolTip("")
        self.keyField.setInputMask("")
        self.keyField.setText("")
        self.keyField.setObjectName("keyField")
        self.keyFieldHelper = QtWidgets.QLabel(self.centralwidget)
        self.keyFieldHelper.setGeometry(QtCore.QRect(10, 40, 311, 16))
        font = QtGui.QFont()
        font.setItalic(True)
        self.keyFieldHelper.setFont(font)
        self.keyFieldHelper.setObjectName("keyFieldHelper")
        self.titleLabel = QtWidgets.QLabel(self.centralwidget)
        self.titleLabel.setGeometry(QtCore.QRect(10, 70, 71, 16))
        self.titleLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.titleLabel.setObjectName("titleLabel")
        self.titleText = QtWidgets.QLineEdit(self.centralwidget)
        self.titleText.setGeometry(QtCore.QRect(90, 70, 231, 21))
        self.titleText.setObjectName("titleText")
        self.bodyLabel = QtWidgets.QLabel(self.centralwidget)
        self.bodyLabel.setGeometry(QtCore.QRect(10, 100, 71, 16))
        self.bodyLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.bodyLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bodyLabel.setObjectName("bodyLabel")
        self.bodyText = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.bodyText.setGeometry(QtCore.QRect(90, 100, 231, 101))
        self.bodyText.setObjectName("bodyText")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(280, 210, 111, 31))
        self.pushButton.setAutoDefault(False)
        self.pushButton.setObjectName("pushButton")
        self.defaultRadio = QtWidgets.QRadioButton(self.centralwidget)
        self.defaultRadio.setGeometry(QtCore.QRect(330, 10, 61, 41))
        self.defaultRadio.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/default/images/default.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.defaultRadio.setIcon(icon)
        self.defaultRadio.setIconSize(QtCore.QSize(40, 40))
        self.defaultRadio.setChecked(True)
        self.defaultRadio.setObjectName("defaultRadio")
        self.newsRadio = QtWidgets.QRadioButton(self.centralwidget)
        self.newsRadio.setGeometry(QtCore.QRect(330, 60, 61, 41))
        self.newsRadio.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/news/images/news.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.newsRadio.setIcon(icon1)
        self.newsRadio.setIconSize(QtCore.QSize(40, 40))
        self.newsRadio.setChecked(False)
        self.newsRadio.setObjectName("NewsRadio")
        self.changeRadio = QtWidgets.QRadioButton(self.centralwidget)
        self.changeRadio.setGeometry(QtCore.QRect(330, 110, 61, 41))
        self.changeRadio.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/change/images/change.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.changeRadio.setIcon(icon2)
        self.changeRadio.setIconSize(QtCore.QSize(40, 40))
        self.changeRadio.setChecked(False)
        self.changeRadio.setObjectName("changeRadio")
        self.alarmRadio = QtWidgets.QRadioButton(self.centralwidget)
        self.alarmRadio.setGeometry(QtCore.QRect(330, 160, 61, 41))
        self.alarmRadio.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/alarm/images/alarm.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.alarmRadio.setIcon(icon3)
        self.alarmRadio.setIconSize(QtCore.QSize(40, 40))
        self.alarmRadio.setObjectName("alarmRadio")
        self.toLabel = QtWidgets.QLabel(self.centralwidget)
        self.toLabel.setGeometry(QtCore.QRect(10, 211, 71, 21))
        self.toLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.toLabel.setObjectName("toLabel")
        self.toBox = QtWidgets.QComboBox(self.centralwidget)
        self.toBox.setGeometry(QtCore.QRect(90, 210, 191, 31))
        self.toBox.setObjectName("toBox")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.add_functions()
        self.checkKey()
        self.getTopics()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MyKUTHL Pusher"))
        self.updateKeyButton.setText(_translate("MainWindow", "Оновити"))
        self.keyLabel.setText(_translate("MainWindow", "API KEY:"))
        self.keyField.setPlaceholderText(_translate("MainWindow", "••••"))
        self.keyFieldHelper.setText(_translate("MainWindow", "*введіть останні 4 символа ключа"))
        self.titleLabel.setText(_translate("MainWindow", "Заголовок:"))
        self.bodyLabel.setText(_translate("MainWindow", "Текст:"))
        self.pushButton.setText(_translate("MainWindow", "Відправити"))
        self.defaultRadio.setAccessibleName(_translate("MainWindow", "radio"))
        self.newsRadio.setAccessibleName(_translate("MainWindow", "radio"))
        self.changeRadio.setAccessibleName(_translate("MainWindow", "radio"))
        self.alarmRadio.setAccessibleName(_translate("MainWindow", "radio"))
        self.toLabel.setText(_translate("MainWindow", "Кому:"))

    def add_functions(self):
        self.pushButton.clicked.connect(lambda: self.sendPush())
        self.updateKeyButton.clicked.connect(lambda: self.addKey())

    def transliterated(self, topic: str):
        dic = {'ь': '', 'ъ': '', 'а': 'a', 'б': 'b', 'в': 'v',
               'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'y', 'ж': 'z',
               'з': 'z', 'и': 'i', 'і': 'i', 'ї': 'i', 'й': 'y',
               'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o',
               'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',
               'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'c', 'ш': 's',
               'щ': 's', 'ы': 'i', 'э': 'e', 'є': 'e', 'ю': 'u',
               'я': 'a', ' ': '', 'ь': '', '(': '', ')': ''}
        transliterated = ''
        for i in topic:
            transliterated += dic.get(i.lower(), i.lower()) if i.isupper() else dic.get(i, i)
        return transliterated

    def sendPush(self):
        key = open("keystore.txt", "r").read()
        title = self.titleText.text()
        body = self.bodyText.toPlainText()
        userGroup = self.transliterated(self.toBox.currentText())
        if self.newsRadio.isChecked():
            icon = "news"
        elif self.changeRadio.isChecked():
            icon = "change"
        elif self.alarmRadio.isChecked():
            icon = "alarm"
        else:
            icon = "default"
        if key:
            pin = self.keyField.text()
            if len(pin) == 4:
                accesskey = key+pin
                headers = {
                    'Content-Type': 'application/json',
                    'Authorization': 'key=' + accesskey,
                }

                body = {
                    'to': "/topics/"+userGroup,
                    'notification': {'title': title, 'body': body, 'sound': 'default', 'badge': 1, 'mutable_content': True},
                    'data': {'icon': icon}
                }
                print(json.dumps(body))
                response = requests.post("https://fcm.googleapis.com/fcm/send",headers = headers, data=json.dumps(body))
                if response.status_code == requests.codes.ok:
                    self.showMessage(QMessageBox.Information, "Повідомлення відправлено", "Успіх")
                else:
                    self.showMessage(QMessageBox.Information, f'Помилка: {response.text}', "Увага")
            else:
                self.showMessage(QMessageBox.Warning, "Введіть останні 4 символи ключа, або додайте новий ключ", "Увага")
        else:
            self.showMessage(QMessageBox.Warning, "Ключ не знайдено, додайте новий ключ", "Увага")

    def showMessage(self, icon: QMessageBox.icon, text: str, title: str):
        msgBox = QMessageBox()
        msgBox.setIcon(icon)
        msgBox.setText(text)
        msgBox.setWindowTitle(title)
        msgBox.setStandardButtons(QMessageBox.Ok)
        msgBox.exec()

    def checkKey(self):
        try:
            key = open("keystore.txt", "r").read()
        except FileNotFoundError:
            key = open("keystore.txt", "x")
        if key:
            self.updateKeyButton.setText("Оновити")
            self.keyFieldHelper.setText("*Введіть останні 4 символа ключа!")
            self.keyField.setText("")
            self.keyField.setPlaceholderText("••••")
            self.keyLabel.setText("PIN:")
        else:
            self.keyLabel.setText("API ключ:")
            self.keyField.setText("")
            self.keyField.setPlaceholderText("••••••••••••••••••••")
            self.updateKeyButton.setText("Додати")
            self.keyFieldHelper.setText("*Ключ не знайдено, введіть новий!")

    def getTopics(self):
        arr = []
        arr.append("news")
        arr.append("test")
        self.toBox.addItems(arr)

    def addKey(self):
        key = self.keyField.text()
        if len(key) > 4:
            mod_key = key[:len(key) - 4]
            open("keystore.txt", "w").write(mod_key)
            self.checkKey()
            self.showMessage(QMessageBox.Information, "Ключ успішно додано", "Увага")
        else:
            self.showMessage(QMessageBox.Warning, "Ключ занадто короткий, введіть дійсний ключ", "Увага")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
